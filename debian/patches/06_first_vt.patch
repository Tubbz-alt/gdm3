It's almost the same tty manager of gdm 2.20, except we don't support Sun VTs,
only Linux and FreeBSD.
Index: gdm-2.30.0/common/gdm-settings-keys.h
===================================================================
--- gdm-2.30.0.orig/common/gdm-settings-keys.h	2010-03-29 23:42:03.000000000 +0200
+++ gdm-2.30.0/common/gdm-settings-keys.h	2010-04-23 18:42:51.171351569 +0200
@@ -32,6 +32,7 @@ G_BEGIN_DECLS
 #define GDM_KEY_TIMED_LOGIN_ENABLE "daemon/TimedLoginEnable"
 #define GDM_KEY_TIMED_LOGIN_USER "daemon/TimedLogin"
 #define GDM_KEY_TIMED_LOGIN_DELAY "daemon/TimedLoginDelay"
+#define GDM_KEY_FIRST_VT "daemon/FirstVT"
 
 #define GDM_KEY_DEBUG "debug/Enable"
 
Index: gdm-2.30.0/daemon/gdm-server.c
===================================================================
--- gdm-2.30.0.orig/daemon/gdm-server.c	2010-03-29 23:42:03.000000000 +0200
+++ gdm-2.30.0/daemon/gdm-server.c	2010-04-23 19:30:43.834854732 +0200
@@ -44,6 +44,9 @@
 #include "gdm-common.h"
 #include "gdm-signal-handler.h"
 
+#include "gdm-settings-direct.h"
+#include "gdm-settings-keys.h"
+
 #include "gdm-server.h"
 
 extern char **environ;
@@ -663,6 +666,203 @@ gdm_server_spawn (GdmServer  *server,
         return ret;
 }
 
+#include <sys/ioctl.h>
+#include <sys/stat.h>
+#if defined (__linux__)
+#define GDM_USE_SYS_VT
+#include <sys/vt.h>
+#elif defined (__FreeBSD__)
+#define GDM_USE_CONSIO_VT
+#include <sys/consio.h>
+
+static const char*
+__itovty (int val)
+{
+	static char str[8];
+	char* next = str + sizeof (str) - 1;
+
+	*next = '\0';
+	do {
+		*--next = "0123456789abcdefghigklmnopqrstuv"[val % 32];
+	} while (val /= 32);
+
+	return next;
+}
+#endif
+
+#define GDMCONSOLEDEVICE "/dev/tty0"
+
+
+static gchar *
+gdm_get_vt_device (int vtno)
+{
+   gchar *vtname = NULL;
+
+#if defined (GDM_USE_SYS_VT)
+     vtname = g_strdup_printf ("/dev/tty%d", vtno);
+#elif defined (GDM_USE_CONSIO_VT)
+     vtname = g_strdup_printf ("/dev/ttyv%s", __itovty (vtno - 1));
+#endif
+
+   return vtname;
+}
+
+static int
+open_vt (int vtno)
+{
+	char *vtname = NULL;
+	int fd = -1;
+
+	vtname = gdm_get_vt_device (vtno);
+
+	do {
+		errno = 0;
+		fd = open (vtname, O_RDWR
+#ifdef O_NOCTTY
+			   |O_NOCTTY
+#endif
+			   , 0);
+	} while G_UNLIKELY (errno == EINTR);
+
+	g_free (vtname);
+
+	return fd;
+}
+
+static int
+get_first_vt (void)
+{
+        int first_vt;
+        if (!gdm_settings_direct_get_int (GDM_KEY_FIRST_VT,
+                                          &first_vt))
+                first_vt = 1;
+        return first_vt;
+}
+
+#if defined (GDM_USE_SYS_VT)
+
+static int
+get_free_vt_sys (void)
+{
+        int fd, fdv;
+        int vtno;
+        unsigned short vtmask;
+        struct vt_stat vtstat;
+
+        do {
+                errno = 0;
+                fd = open (GDMCONSOLEDEVICE,
+                           O_WRONLY
+#ifdef O_NOCTTY
+                           |O_NOCTTY
+#endif
+                           , 0);
+        } while G_UNLIKELY (errno == EINTR);
+        if (fd < 0)
+                return -1;
+
+        if (ioctl (fd, VT_GETSTATE, &vtstat) < 0) {
+                VE_IGNORE_EINTR (close (fd));
+                return -1;
+        }
+
+        for (vtno = get_first_vt (), vtmask = 1 << vtno; vtstat.v_state & vtmask; vtno++, vtmask <<= 1);
+        if (!vtmask) {
+                VE_IGNORE_EINTR (close (fd));
+                return -1;
+        }
+
+        fdv = open_vt (vtno);
+        if (fdv < 0) {
+                VE_IGNORE_EINTR (close (fd));
+                return -1;
+        }
+        VE_IGNORE_EINTR (close (fdv));
+        VE_IGNORE_EINTR (close (fd));
+        return vtno;
+}
+
+#elif defined (GDM_USE_CONSIO_VT)
+
+static int
+get_free_vt_consio (void)
+{
+        int fd, fdv;
+        int vtno;
+        GList *to_close_vts = NULL, *li;
+
+        do {
+                errno = 0;
+                fd = open (GDMCONSOLEDEVICE,
+                           O_WRONLY
+#ifdef O_NOCTTY
+                           |O_NOCTTY
+#endif
+                           , 0);
+        } while G_UNLIKELY (errno == EINTR);
+        if (fd < 0)
+                return -1;
+
+        if ((ioctl (fd, VT_OPENQRY, &vtno) < 0) || (vtno == -1)) {
+                VE_IGNORE_EINTR (close (fd));
+                return -1;
+        }
+
+        fdv = open_vt (vtno);
+        if (fdv < 0) {
+                VE_IGNORE_EINTR (close (fd));
+                return -1;
+        }
+
+        while (vtno < get_first_vt ()) {
+                int oldvt = vtno;
+                to_close_vts = g_list_prepend (to_close_vts,
+                                               GINT_TO_POINTER (fdv));
+
+                if (ioctl (fd, VT_OPENQRY, &vtno) == -1) {
+                        vtno = -1;
+                        break;
+                }
+
+                if (oldvt == vtno) {
+                        vtno = -1;
+                        break;
+                }
+
+                fdv = open_vt (vtno);
+                if (fdv < 0) {
+                        vtno = -1;
+                        break;
+                }
+        }
+
+        for (li = to_close_vts; li != NULL; li = li->next) {
+                VE_IGNORE_EINTR (close (GPOINTER_TO_INT (li->data)));
+        }
+        VE_IGNORE_EINTR (close (fdv));
+        VE_IGNORE_EINTR (close (fd));
+        return vtno;
+}
+
+#endif
+
+static char *
+gdm_get_empty_vt_argument (void)
+{
+        int vt = -1;
+
+#if defined (GDM_USE_SYS_VT)
+        vt = get_free_vt_sys ();
+#elif defined (GDM_USE_CONSIO_VT)
+        vt = get_free_vt_consio ();
+#endif
+
+        if (vt < 0)
+                return NULL;
+        else
+                return g_strdup_printf ("vt%d", vt);
+}
+
 /**
  * gdm_server_start:
  * @disp: Pointer to a GdmDisplay structure
@@ -674,10 +874,14 @@ gboolean
 gdm_server_start (GdmServer *server)
 {
         gboolean res;
+        char *vtarg;
+
+        vtarg = gdm_get_empty_vt_argument ();
 
         /* fork X server process */
-        res = gdm_server_spawn (server, NULL);
+        res = gdm_server_spawn (server, vtarg);
 
+        g_free (vtarg);
         return res;
 }
 
Index: gdm-2.30.0/data/gdm.schemas.in.in
===================================================================
--- gdm-2.30.0.orig/data/gdm.schemas.in.in	2010-03-29 23:42:03.000000000 +0200
+++ gdm-2.30.0/data/gdm.schemas.in.in	2010-04-23 18:42:51.171351569 +0200
@@ -47,6 +47,11 @@
       <signature>i</signature>
       <default>30</default>
     </schema>
+    <schema>
+      <key>daemon/FirstVT</key>
+      <signature>i</signature>
+      <default>7</default>
+    </schema>
 
     <schema>
       <key>debug/Enable</key>
