## Description: add some description
## Origin/Author: add some origin or author
## Bug: bug URL
diff -Nur -x '*.orig' -x '*~' gdm-2.29.92/common/gdm-settings.c gdm-2.29.92.new/common/gdm-settings.c
--- gdm-2.29.92/common/gdm-settings.c	2010-03-15 23:04:30.489482653 +0100
+++ gdm-2.29.92.new/common/gdm-settings.c	2010-03-15 23:04:41.703412015 +0100
@@ -28,6 +28,7 @@
 #include <signal.h>
 #include <sys/stat.h>
 #include <sys/types.h>
+#include <pwd.h>
 
 #include <glib.h>
 #include <glib/gi18n.h>
@@ -49,6 +50,10 @@
 #define GDM_SETTINGS_DBUS_PATH GDM_DBUS_PATH "/Settings"
 #define GDM_SETTINGS_DBUS_NAME "org.gnome.DisplayManager.Settings"
 
+#define GCONF_SOUND_EVENT_KEY "/desktop/gnome/sound/event_sounds"
+// should be to be more flexible later ($HOME/.gconf?)
+#define GCONF_SOURCE "xml:readwrite:/var/lib/gdm/.gconf"
+
 #define GDM_SETTINGS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GDM_TYPE_SETTINGS, GdmSettingsPrivate))
 
 struct GdmSettingsPrivate
@@ -83,6 +88,142 @@
         return ret;
 }
 
+static gboolean
+gdm_settings_get_gconf_sound_value (gboolean *enabled) {
+
+        GError  *error = NULL;
+        char   *shutdown_command[] = { "gconftool-2", "--shutdown" };
+        char   *get_command[]  =  { "gconftool-2", "--direct", "-g", GCONF_SOUND_EVENT_KEY, "--config-source", GCONF_SOURCE };
+        gboolean res;
+        struct passwd *pwent;
+        uid_t          gdm_uid;
+        uid_t          current_uid;
+        gboolean success = FALSE;
+        gchar *value;
+
+        *enabled = TRUE;
+        current_uid = geteuid ();
+        pwent = getpwnam (GDM_USERNAME);
+        if G_UNLIKELY (pwent == NULL)
+                g_warning ("Can't access to 'gdm' user name in passwd");
+        else {
+                gdm_uid = pwent->pw_uid;
+                seteuid (gdm_uid);
+                res = g_spawn_sync (NULL,
+                                    shutdown_command,
+                                    NULL,
+                                    G_SPAWN_SEARCH_PATH,
+                                    NULL,
+                                    NULL,
+                                    NULL,
+                                    NULL,
+                                    NULL,
+                                    &error);
+                if (!res) {
+                        if (error != NULL) {
+                                g_warning ("Unable to shutdown gconf: %s", error->message);
+                                g_error_free (error);
+                        }
+                        else
+                                g_warning ("Unable to shutdown gconf: unknown error");
+                }
+                else {
+                        res = g_spawn_sync (NULL,
+                                            get_command,
+                                            NULL,
+                                            G_SPAWN_SEARCH_PATH
+                                            | G_SPAWN_STDERR_TO_DEV_NULL,
+                                            NULL,
+                                            NULL,
+                                            &value,
+                                            NULL,
+                                            NULL,
+                                            &error);
+                        if (!res) {
+                                 if (error != NULL) {
+                                         g_warning ("Unable to get event key to gconf: %s", error->message);
+                                         g_error_free (error);
+                                 }
+                                else
+                                         g_warning ("Unable to get event key to gconf: unknown error");
+                         }
+                        else {
+                                if (strcmp(value, "false\n") == 0)
+                                         *enabled = FALSE;
+                                else
+                                         *enabled = TRUE;
+                                success = TRUE;
+                        }
+                }
+        }
+        seteuid(current_uid);
+        if (value)
+                g_free (value);
+
+        return success;
+}
+
+
+static void
+gdm_settings_set_gconf_sound_value (gboolean enabled) {
+
+        GError  *error = NULL;
+        char   *shutdown_command[] = { "gconftool-2", "--shutdown" };
+        char   *set_command[]  =  { "gconftool-2", "--direct", "-s", GCONF_SOUND_EVENT_KEY, "-t", "boolean", (gchar *) enabled, "--config-source", GCONF_SOURCE };
+        gboolean res;
+        struct passwd *pwent;
+        uid_t          gdm_uid;
+        uid_t          current_uid;
+
+        current_uid = geteuid ();
+        pwent = getpwnam (GDM_USERNAME);
+        if G_UNLIKELY (pwent == NULL)
+                g_warning ("Can't access to 'gdm' user name in passwd");
+        else {
+                gdm_uid = pwent->pw_uid;
+                seteuid (gdm_uid);
+                res = g_spawn_sync (NULL,
+                                    shutdown_command,
+                                    NULL,
+                                    G_SPAWN_SEARCH_PATH,
+                                    NULL,
+                                    NULL,
+                                    NULL,
+                                    NULL,
+                                    NULL,
+                                    &error);
+                if (!res) {
+                        if (error != NULL) {
+                                g_warning ("Unable to shutdown gconf: %s", error->message);
+                                g_error_free (error);
+                        }
+                        else
+                                g_warning ("Unable to shutdown gconf: unknown error");
+                }
+                else {
+                        res = g_spawn_async (NULL,
+                                             set_command,
+                                             NULL,
+                                             G_SPAWN_SEARCH_PATH
+                                             | G_SPAWN_STDOUT_TO_DEV_NULL
+                                             | G_SPAWN_STDERR_TO_DEV_NULL,
+                                             NULL,
+                                             NULL,
+                                             NULL,
+                                             &error);
+                        if (!res) {
+                                if (error != NULL) {
+                                        g_warning ("Unable to set event key to gconf: %s", error->message);
+                                        g_error_free (error);
+                                 }
+                                 else
+                                        g_warning ("Unable to set event key to gconf: unknown error");
+                        }
+                }
+        }
+        seteuid(current_uid);
+
+}
 /*
 dbus-send --system --print-reply --dest=org.gnome.DisplayManager /org/gnome/DisplayManager/Settings org.gnome.DisplayManager.Settings.GetValue string:"xdmcp/Enable"
 */
@@ -111,6 +252,26 @@
         return res;
 }
 
+
+/*
+dbus-send --system --print-reply --dest=org.gnome.DisplayManager /org/gnome/DisplayManager/Settings org.gnome.DisplayManager.Settings.GetSoundEnabled
+*/
+
+gboolean
+gdm_settings_get_sound_enabled (GdmSettings *settings,
+                                gboolean    *enabled,
+                                GError     **error)
+{
+        gboolean res;
+        g_debug ("get sound");
+
+        g_return_val_if_fail (GDM_IS_SETTINGS (settings), FALSE);
+
+        res = gdm_settings_get_gconf_sound_value (enabled);
+
+        return res;
+}
+
 static void
 unlock_auth_cb (PolkitAuthority *authority,
                 GAsyncResult *result,
@@ -155,6 +316,12 @@
         gchar *key, *value;
 } SetValueData;
 
+typedef struct
+{
+        DBusGMethodInvocation *context;
+        gboolean enabled;
+} SetSoundEnabledData;
+
 static void
 set_value_auth_cb (PolkitAuthority *authority,
                    GAsyncResult *result,
@@ -229,6 +396,68 @@
         return TRUE;
 }
 
+static void
+set_sound_enabled_auth_cb (PolkitAuthority *authority,
+                           GAsyncResult *result,
+                           SetSoundEnabledData *data)
+{
+        PolkitAuthorizationResult *auth_result;
+        GError  *error = NULL;
+        
+        auth_result = polkit_authority_check_authorization_finish (authority, result, &error);
+
+        if (!auth_result)
+                dbus_g_method_return_error (data->context, error);
+        else {
+                if (polkit_authorization_result_get_is_authorized (auth_result)) {
+                        gdm_settings_set_gconf_sound_value (data->enabled);
+                        dbus_g_method_return (data->context);
+                }
+                else {
+                        error = g_error_new (DBUS_GERROR_REMOTE_EXCEPTION, 0, "Not authorized");
+                        dbus_g_method_return_error (data->context, error);
+                }
+        }
+    
+        if (auth_result)
+                g_object_unref (auth_result);
+        if (error)
+                g_error_free (error);
+
+        g_free (data);
+}
+
+/*
+dbus-send --system --print-reply --dest=org.gnome.DisplayManager /org/gnome/DisplayManager/Settings org.gnome.DisplayManager.Settings.SetValue string:"xdmcp/Enable" string:"false"
+*/
+
+gboolean
+gdm_settings_set_sound_enabled (GdmSettings *settings,
+                                gboolean     enabled,
+                                DBusGMethodInvocation *context)
+{
+        SetSoundEnabledData *data;
+    
+        g_return_val_if_fail (GDM_IS_SETTINGS (settings), FALSE);
+
+
+        g_debug ("Setting sound enabled to %s", enabled ? "true" : "false");
+    
+        /* Authorize with PolicyKit */
+        data = g_malloc (sizeof(SetSoundEnabledData));
+        data->context = context;
+        data->enabled = enabled;
+        polkit_authority_check_authorization (polkit_authority_get (),
+                                              polkit_system_bus_name_new (dbus_g_method_get_sender (context)),
+                                              "org.gnome.displaymanager.settings.write",
+                                              NULL,
+                                              POLKIT_CHECK_AUTHORIZATION_FLAGS_ALLOW_USER_INTERACTION,
+                                              NULL,
+                                              (GAsyncReadyCallback) set_sound_enabled_auth_cb,
+                                              data);
+        return TRUE;
+}
+
 static gboolean
 register_settings (GdmSettings *settings)
 {
diff -Nur -x '*.orig' -x '*~' gdm-2.29.92/common/gdm-settings.h gdm-2.29.92.new/common/gdm-settings.h
--- gdm-2.29.92/common/gdm-settings.h	2010-03-15 23:04:30.489482653 +0100
+++ gdm-2.29.92.new/common/gdm-settings.h	2010-03-15 23:04:31.182465850 +0100
@@ -71,12 +71,18 @@
                                                                  const char  *key,
                                                                  char       **value,
                                                                  GError     **error);
+gboolean            gdm_settings_get_sound_enabled              (GdmSettings *settings,
+                                                                 gboolean    *value,
+                                                                 GError     **error);
 gboolean            gdm_settings_unlock                         (GdmSettings *settings,
                                                                  DBusGMethodInvocation *context);
 gboolean            gdm_settings_set_value                      (GdmSettings *settings,
                                                                  const char  *key,
                                                                  const char  *value,
                                                                  DBusGMethodInvocation *context);
+gboolean            gdm_settings_set_sound_enabled              (GdmSettings *settings,
+                                                                 gboolean     value,
+                                                                 DBusGMethodInvocation *context);
 
 G_END_DECLS
 
diff -Nur -x '*.orig' -x '*~' gdm-2.29.92/common/gdm-settings.xml gdm-2.29.92.new/common/gdm-settings.xml
--- gdm-2.29.92/common/gdm-settings.xml	2010-03-15 23:04:30.489482653 +0100
+++ gdm-2.29.92.new/common/gdm-settings.xml	2010-03-15 23:04:31.182465850 +0100
@@ -5,6 +5,9 @@
       <arg name="key" direction="in" type="s"/>
       <arg name="value" direction="out" type="s"/>
     </method>
+    <method name="GetSoundEnabled">
+      <arg name="enabled" direction="out" type="b"/>
+    </method>
     <method name="Unlock">
       <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
       <arg name="is_unlocked" direction="out" type="b"/>
@@ -14,6 +17,10 @@
       <arg name="key" direction="in" type="s"/>
       <arg name="value" direction="in" type="s"/>
     </method>
+    <method name="SetSoundEnabled">
+      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
+      <arg name="enabled" direction="in" type="b"/>
+    </method>
     <signal name="ValueChanged">
       <arg name="key" type="s"/>
       <arg name="old_value" type="s"/>
